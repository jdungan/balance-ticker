var DateUtil, ExtMath, Summary, build, height, line, parseDate, sparkline, width, x, y,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ExtMath = (function(_super) {
  __extends(ExtMath, _super);

  function ExtMath() {
    return ExtMath.__super__.constructor.apply(this, arguments);
  }

  ExtMath.truncate = function(x, precision) {
    var scale, scales;
    if (precision == null) {
      precision = 0;
    }
    scales = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];
    scale = scales[precision];
    return Math.round(x * scale) / scale;
  };

  return ExtMath;

})(Math);

width = 96;

height = 64;

x = d3.scale.linear().range([0, width - 2]);

y = d3.scale.linear().range([height - 4, 0]);

parseDate = d3.time.format("%Y-%m-%d").parse;

line = d3.svg.line().interpolate("basis").x(function(d) {
  return x(d[0]);
}).y(function(d) {
  return y(d[1]);
});

sparkline = function(g, data) {
  if (data.length > 0) {
    g.append('path').datum(data).classed('sparkline', true).attr('d', line);
    return g.append('circle').classed('sparkcircle', true).attr('cx', function() {
      return x(_.last(data)[0]);
    }).attr('cy', function() {
      return y(_.last(data)[1]);
    }).attr('r', 1.5);
  }
};

DateUtil = function(JSdate, type) {
  if (JSdate) {
    switch (type) {
      case "M/D":
        return (JSdate.getMonth() + 1) + "/" + JSdate.getDate();
    }
  }
};

Summary = (function() {
  function Summary() {
    this.name = "";
    this.calls = [];
    this.dates = [];
  }

  Summary.prototype.sum = function(days) {
    if (days == null) {
      days = this.calls;
    }
    if (this.calls.length > 0) {
      return _.reduce(days, function(memo, num) {
        return memo + num;
      });
    } else {
      return 0;
    }
  };

  Summary.prototype.max = function() {
    return _.reduce(this.calls, function(m, n) {
      if (n > m) {
        return n;
      } else {
        return m;
      }
    });
  };

  Summary.prototype.min = function() {
    return _.reduce(this.calls, function(m, n) {
      if (n < m) {
        return n;
      } else {
        return m;
      }
    });
  };

  Summary.prototype.avg = function(moving) {
    var pastdays;
    pastdays = _.last(this.calls, moving);
    return ExtMath.truncate(this.sum(pastdays) / pastdays.length, 1);
  };

  Summary.prototype.add = function(points) {
    var iter;
    iter = function(e, i, l) {
      var date, date_pos, _ref;
      date_pos = _.sortedIndex(this.dates, e[0]);
      date = (_ref = this.dates[date_pos]) != null ? _ref : 0;
      if (e[0].valueOf() !== date.valueOf()) {
        this.dates = _.first(this.dates, date_pos).concat([e[0]], _.rest(this.dates, date_pos));
        this.calls = _.first(this.calls, date_pos).concat([0], _.rest(this.calls, date_pos));
      }
      return this.calls[date_pos] += e[1];
    };
    return _.each(points, iter, this);
  };

  Summary.prototype.points = function() {
    return _.zip(this.dates, this.calls);
  };

  return Summary;

})();

build = function(data) {
  var display, media_li, total_calls;
  console.log(data);
  total_calls = new Summary;
  total_calls.name = "ALL";
  display = _.map(data.contents.data, function(v, i, l) {
    var calls, dates, this_state;
    dates = _.map(v.x, function(v, i, l) {
      return parseDate(v);
    });
    calls = _.map(v.y, function(v, i, l) {
      var _name;
      return v - (l[_name = i - 1] != null ? l[_name] : l[_name] = 0);
    });
    this_state = new Summary;
    this_state.name = v.name;
    this_state.add(_.zip(dates, calls));
    total_calls.add(this_state.points());
    return this_state;
  });
  display.unshift(total_calls);
  media_li = d3.select('#programs').selectAll('li').data(display).enter().append("li").classed("list-group-item", true).append("div").classed("media", true);
  return media_li.each(function(d, i) {
    var body, media, svg;
    x.domain(d3.extent(d.dates));
    y.domain(d3.extent(d.calls));
    media = d3.select(this);
    svg = media.append("div").classed("pull-left", true).append('svg').classed("media-object", true).attr('width', width).attr('height', height).append('g').attr('transform', 'translate(0, 2)');
    sparkline(svg, d.points());
    body = media.append('div').classed("media-body", true);
    body.append('h4').classed("media-heading", true).text(function(d, i) {
      return d.name;
    });
    body.append('p').text(function(d, i) {
      var lastdate;
      lastdate = _.last(d.dates);
      return "There have been " + d.sum() + " balance checks since " + DateUtil(lastdate, "M/D") + ".";
    });
    body.append('p').text(function(d, i) {
      var chk, tenday;
      tenday = d.avg(10);
      chk = tenday === 1 ? " check" : " checks";
      return "There is an average of  " + tenday + chk + " per day over the past 10 days.";
    });
    return body.append('p').text(function(d, i) {
      var diff, lastcalls, lastdates, sentence;
      lastcalls = _.last(d.calls, 2);
      lastdates = _.last(d.dates, 2);
      diff = lastcalls[1] - lastcalls[0];
      sentence = ["", "", "", "on", "", "than on", ""];
      sentence[0] = (Math.abs(diff)) === 1 ? "There was" : "There were";
      sentence[1] = Math.abs(diff);
      sentence[2] = diff > 0 ? "more" : "fewer";
      sentence[4] = DateUtil(lastdates[1], "M/D");
      sentence[6] = DateUtil(lastdates[0], "M/D") + ".";
      return sentence.join(" ");
    });
  });
};

$(document).ready(function() {
  var data_url;
  data_url = 'http://whateverorigin.org/get?url=' + encodeURIComponent('https://plot.ly/~lippytak/184/balance-metrics-checks.json') + '&callback=?';
  return $.getJSON(data_url, build);
});

//# sourceMappingURL=data:application/json;base64,