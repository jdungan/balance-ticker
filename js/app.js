var ExtMath, build, height, line, parseDate, sparkline, width, x, y, _sum,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ExtMath = (function(_super) {
  __extends(ExtMath, _super);

  function ExtMath() {
    return ExtMath.__super__.constructor.apply(this, arguments);
  }

  ExtMath.truncate = function(x, precision) {
    var scale, scales;
    if (precision == null) {
      precision = 0;
    }
    scales = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];
    scale = scales[precision];
    return Math.round(x * scale) / scale;
  };

  return ExtMath;

})(Math);

_sum = function(memo, num) {
  return memo + num;
};

width = 96;

height = 48;

x = d3.scale.linear().range([0, width - 2]);

y = d3.scale.linear().range([height - 4, 0]);

parseDate = d3.time.format("%Y-%m-%d").parse;

line = d3.svg.line().interpolate("basis").x(function(d) {
  return x(d[0]);
}).y(function(d) {
  return y(d[1]);
});

sparkline = function(g, data) {
  g.append('path').datum(data).classed('sparkline', true).attr('d', line);
  return g.append('circle').classed('sparkcircle', true).attr('cx', function() {
    return x(_.last(data)[0]);
  }).attr('cy', function() {
    return y(_.last(data)[1]);
  }).attr('r', 1.5);
};

build = function(data) {
  var media_li;
  console.log(data.contents.data);
  media_li = d3.select('#programs').selectAll('li').data(data.contents.data).enter().append("li").classed("list-group-item", true).append("div").classed("media", true);
  return media_li.each(function(d, i) {
    var body, calls, dates, media, points, svg;
    dates = _.map(d.x, function(d) {
      return parseDate(d);
    });
    calls = _.map(d.y, function(v, i, l) {
      var _name;
      return v - (l[_name = i - 1] != null ? l[_name] : l[_name] = 0);
    });
    points = _.zip(dates, calls);
    x.domain(d3.extent(dates));
    y.domain(d3.extent(calls));
    media = d3.select(this);
    svg = media.append("div").classed("pull-left", true).append('svg').classed("media-object", true).attr('width', width).attr('height', height).append('g').attr('transform', 'translate(0, 2)');
    sparkline(svg, points);
    body = media.append('div').classed("media-body", true);
    body.append('h4').classed("media-heading", true).text(function(d, i) {
      return d.name;
    });
    body.append('p').text(function(d, i) {
      return "TOTAL CALLS: " + _.last(d.y);
    });
    body.append('p').text(function(d, i) {
      var sum;
      sum = _.last(d.y);
      return "DAILY AVG: " + ExtMath.truncate(sum / d.y.length, 2);
    });
    return body.append('p').text(function(d, i) {
      var diff, lasttwo;
      lasttwo = _.last(calls, 2);
      diff = (lasttwo[1] != null) - (lasttwo[0] != null ? lasttwo[0] : lasttwo[0] = 0);
      return "CHG: " + diff;
    });
  });
};

$(document).ready(function() {
  var data_url;
  data_url = 'http://whateverorigin.org/get?url=' + encodeURIComponent('https://plot.ly/~lippytak/184/balance-metrics-checks.json') + '&callback=?';
  return $.getJSON(data_url, build);
});

//# sourceMappingURL=data:application/json;base64,