var DateUtil, ExtMath, Sparkline, Summary, build, parseDate,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ExtMath = (function(_super) {
  __extends(ExtMath, _super);

  function ExtMath() {
    return ExtMath.__super__.constructor.apply(this, arguments);
  }

  ExtMath.truncate = function(x, precision) {
    var scale, scales;
    if (precision == null) {
      precision = 0;
    }
    scales = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];
    scale = scales[precision];
    return Math.round(x * scale) / scale;
  };

  return ExtMath;

})(Math);

parseDate = d3.time.format("%Y-%m-%d").parse;

DateUtil = function(JSdate, type) {
  if (JSdate) {
    switch (type) {
      case "M/D":
        return (JSdate.getMonth() + 1) + "/" + JSdate.getDate();
    }
  }
};

Sparkline = (function() {
  Sparkline.prototype.width = 96;

  Sparkline.prototype.height = 64;

  Sparkline.prototype.x = d3.scale.linear().range([0, Sparkline.prototype.width - 2]);

  Sparkline.prototype.y = d3.scale.linear().range([Sparkline.prototype.height - 4, 0]);

  function Sparkline(g, d) {
    var line, x, y;
    if (d.calls.length > 0) {
      x = this.x.domain(d3.extent(d.dates));
      y = this.y.domain(d3.extent(d.calls));
      line = d3.svg.line().interpolate("basis").x(function(d) {
        return x(d[0]);
      }).y(function(d) {
        return y(d[1]);
      });
      g.append('path').datum(d.points()).classed('sparkline', true).attr('d', line);
      g.append('circle').classed('sparkcircle', true).attr('cx', this.x(_.last(d.dates))).attr('cy', this.y(_.last(d.calls))).attr('r', 1.5);
      g;
    }
  }

  return Sparkline;

})();

Summary = (function() {
  function Summary(obj) {
    if (obj) {
      this.name = obj.name, this.dates = obj.dates, this.calls = obj.calls;
    }
    if (this.name == null) {
      this.name = "";
    }
    if (this.dates == null) {
      this.dates = [];
    }
    if (this.calls == null) {
      this.calls = [];
    }
  }

  Summary.prototype.sum = function(days) {
    if (days == null) {
      days = this.calls;
    }
    if (this.calls.length > 0) {
      return _.reduce(days, function(memo, num) {
        return memo + num;
      });
    } else {
      return 0;
    }
  };

  Summary.prototype.max = function() {
    return _.reduce(this.calls, function(m, n) {
      if (n > m) {
        return n;
      } else {
        return m;
      }
    });
  };

  Summary.prototype.min = function() {
    return _.reduce(this.calls, function(m, n) {
      if (n < m) {
        return n;
      } else {
        return m;
      }
    });
  };

  Summary.prototype.avg = function(moving) {
    var pastdays;
    pastdays = _.last(this.calls, moving);
    return ExtMath.truncate(this.sum(pastdays) / moving, 1);
  };

  Summary.prototype.add = function(points) {
    var iter;
    iter = function(e, i, l) {
      var date, date_pos, _ref;
      date_pos = _.sortedIndex(this.dates, e[0]);
      date = (_ref = this.dates[date_pos]) != null ? _ref : 0;
      if (e[0].valueOf() !== date.valueOf()) {
        this.dates = _.first(this.dates, date_pos).concat([e[0]], _.rest(this.dates, date_pos));
        this.calls = _.first(this.calls, date_pos).concat([0], _.rest(this.calls, date_pos));
      }
      return this.calls[date_pos] += e[1];
    };
    return _.each(points, iter, this);
  };

  Summary.prototype.points = function() {
    return _.zip(this.dates, this.calls);
  };

  return Summary;

})();

build = function(data) {
  var display, media_li, total_calls;
  console.log(data);
  total_calls = new Summary;
  total_calls.name = "ALL";
  display = _.map(data, function(v, i, l) {
    var this_state;
    v.dates = _.map(v.x, function(v, i, l) {
      return parseDate(v);
    });
    v.calls = _.map(v.y, function(v, i, l) {
      var _name;
      return v - (l[_name = i - 1] != null ? l[_name] : l[_name] = 0);
    });
    this_state = new Summary(v);
    total_calls.add(this_state.points());
    return this_state;
  });
  display = _.sortBy(display, function(v) {
    return v.calls[v.calls.length - 2] - v.calls[v.calls.length - 1];
  });
  display.unshift(total_calls);
  media_li = d3.select('#programs').selectAll('li').data(display).enter().append("li").classed("list-group-item", true).append("div").classed("media", true);
  return media_li.each(function(d, i) {
    var body, g, media;
    media = d3.select(this);
    g = media.append("div").classed("pull-left", true).append('svg').classed("media-object", true).attr('width', 96).attr('height', 64).append('g').attr('transform', 'translate(0, 2)');
    new Sparkline(g, d);
    body = media.append('div').classed("media-body", true);
    body.append('h4').classed("media-heading", true).text(d.name);
    body.append('p').text(function(d, i) {
      var sentence;
      sentence = ["There were", "", "balance checks between", "", "and", ""];
      sentence[1] = d.sum();
      sentence[3] = DateUtil(_.first(d.dates), "M/D");
      sentence[5] = DateUtil(_.last(d.dates), "M/D") + ".";
      return sentence.join(" ");
    });
    body.append('p').text(function(d, i) {
      var chk, tenday;
      tenday = d.avg(10);
      chk = tenday === 1 ? " check" : " checks";
      return "There was an average of  " + tenday + chk + " per day over the past 10 days.";
    });
    return body.append('p').text(function(d, i) {
      var diff, lastcalls, lastdates, sentence;
      lastcalls = _.last(d.calls, 2);
      lastdates = _.last(d.dates, 2);
      diff = lastcalls[1] - lastcalls[0];
      sentence = ["There ...", "num", "more", "checks", "on", "date", "than on", "date"];
      sentence[0] = (Math.abs(diff)) === 1 ? "There was" : "There were";
      sentence[1] = Math.abs(diff);
      sentence[2] = diff > 0 ? "more" : "fewer";
      sentence[3] = (Math.abs(diff)) === 1 ? "check" : "checks";
      sentence[5] = DateUtil(lastdates[1], "M/D");
      sentence[7] = DateUtil(lastdates[0], "M/D") + ".";
      if (diff === 0) {
        sentence[1] = "the";
        sentence[2] = "same number of";
        sentence[6] = "and";
      }
      return sentence.join(" ");
    });
  });
};

$(document).ready(function() {
  var data_url, err_msg;
  data_url = 'https://plot.ly/~lippytak/184/balance-metrics-checks.json';
  err_msg = function() {
    return d3.select('#ticker_msg').text('Sorry, the request failed.');
  };
  d3.select('#ticker_msg').text('Retrieving data ... ');
  return $.ajax({
    dataType: "json",
    url: data_url
  }).done(function(data) {
    if (data.data) {
      d3.select('#ticker_msg').text('Sorted by largest daily increase');
      return build(data.data);
    } else {
      return err_msg();
    }
  }).fail(function(err) {
    return err_msg();
  });
});

//# sourceMappingURL=data:application/json;base64,