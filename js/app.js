var ExtMath, build, height, line, parseDate, sparkline, width, x, y, _sum,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ExtMath = (function(_super) {
  __extends(ExtMath, _super);

  function ExtMath() {
    return ExtMath.__super__.constructor.apply(this, arguments);
  }

  ExtMath.truncate = function(x, precision) {
    var scale, scales;
    if (precision == null) {
      precision = 0;
    }
    scales = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];
    scale = scales[precision];
    return Math.round(x * scale) / scale;
  };

  return ExtMath;

})(Math);

_sum = function(memo, num) {
  return memo + num;
};

width = 64;

height = 64;

x = d3.scale.linear().range([0, width - 2]);

y = d3.scale.linear().range([height - 4, 0]);

parseDate = d3.time.format("%Y-%m-%d").parse;

line = d3.svg.line().interpolate("basis").x(function(d) {
  return x(d[0]);
}).y(function(d) {
  return y(d[1]);
});

sparkline = function(g, data) {
  var dates, points;
  dates = _.map(data.x, function(d) {
    return parseDate(d);
  });
  points = _.zip(dates, data.y);
  x.domain(d3.extent(dates));
  y.domain(d3.extent(data.y));
  g.append('path').datum(points).classed('sparkline', true).attr('d', line);
  return g.append('circle').classed('sparkcircle', true).attr('cx', function() {
    return x(_.last(dates));
  }).attr('cy', function() {
    return y(_.last(data.y));
  }).attr('r', 1.5);
};

build = function(data) {
  var media_li;
  console.log(data.contents.data);
  media_li = d3.select('#programs').selectAll('li').data(data.contents.data).enter().append("li").classed("list-group-item", true).append("div").classed("media", true);
  return media_li.each(function(d, i) {
    var body, media, svg;
    media = d3.select(this);
    svg = media.append("div").classed("pull-left", true).append('svg').classed("media-object", true).attr('width', width).attr('height', height).append('g').attr('transform', 'translate(0, 2)');
    sparkline(svg, d);
    body = media.append('div').classed("media-body", true);
    body.append('h4').classed("media-heading", true).text(function(d, i) {
      return d.name;
    });
    body.append('p').text(function(d, i) {
      var sum;
      sum = _.reduce(d.y, _sum, 0);
      return "TOTAL CALLS: " + sum;
    });
    return body.append('p').text(function(d, i) {
      var sum;
      sum = _.reduce(d.y, _sum, 0);
      return "DAILY AVG: " + ExtMath.truncate(sum / d.y.length, 2);
    });
  });
};

$(document).ready(function() {
  var data_url;
  data_url = 'http://whateverorigin.org/get?url=' + encodeURIComponent('https://plot.ly/~lippytak/184/balance-metrics-checks.json') + '&callback=?';
  return $.getJSON(data_url, build);
});

//# sourceMappingURL=data:application/json;base64,