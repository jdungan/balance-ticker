var DateUtil, FillArray, Month, SmallGraph, Sparkline, Summary, Weekday, build, parseDate,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

parseDate = d3.time.format("%Y-%m-%d").parse;

DateUtil = function(JSdate, type) {
  if (JSdate) {
    switch (type) {
      case "M/D":
        return (JSdate.getMonth() + 1) + "/" + JSdate.getDate();
    }
  }
};

FillArray = function(c, fill) {
  var iter;
  if (fill != null) {
    iter = function() {
      return (function(v) {
        return v;
      })(fill);
    };
  } else {
    iter = function(v, i) {
      return i + 1;
    };
  }
  return Array.apply(null, Array(c)).map(iter);
};

SmallGraph = (function() {
  function SmallGraph() {}

  SmallGraph.prototype.width = 96;

  SmallGraph.prototype.height = 32;

  SmallGraph.prototype.x = d3.scale.linear().range([0, SmallGraph.prototype.width]);

  SmallGraph.prototype.y = d3.scale.linear().range([SmallGraph.prototype.height, 0]);

  return SmallGraph;

})();

Sparkline = (function(_super) {
  __extends(Sparkline, _super);

  function Sparkline(g, d) {
    var line, x, y;
    if (d.calls.length > 0) {
      x = this.x.domain(d3.extent(d.dates));
      y = this.y.domain(d3.extent(d.calls));
      line = d3.svg.line().interpolate("basis").x(function(d) {
        return x(d[0]);
      }).y(function(d) {
        return y(d[1]);
      });
      g.append('path').datum(d.points()).classed('sparkline', true).attr('d', line);
      g.append('circle').attr({
        "class": 'sparkcircle',
        cx: this.x(_.last(d.dates)),
        cy: this.y(_.last(d.calls)),
        r: 1.5
      });
      g;
    }
  }

  return Sparkline;

})(SmallGraph);

Weekday = (function(_super) {
  __extends(Weekday, _super);

  Weekday.prototype.labels = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];

  Weekday.prototype.x = d3.scale.ordinal().domain([0, 1, 2, 3, 4, 5, 6]).rangeRoundBands([0, Weekday.prototype.width], .2);

  Weekday.prototype.xAxis = d3.svg.axis().scale(Weekday.prototype.x).orient("bottom");

  function Weekday(g, d) {
    var add_point, bar, days, point, ticks, _i, _len, _ref;
    days = FillArray(7, 0);
    add_point = function(p) {
      return days[p[0].getDay()] += p[1];
    };
    _ref = d.points();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      point = _ref[_i];
      add_point(point);
    }
    this.y.domain([0, d3.max(days)]);
    bar = g.selectAll("g").data(days).enter().append("g").attr("transform", (function(_this) {
      return function(d, i) {
        return "translate(" + _this.x(i) + ",0)";
      };
    })(this));
    bar.append("rect").attr({
      "class": "bar",
      y: (function(_this) {
        return function(d) {
          return _this.y(d);
        };
      })(this),
      height: (function(_this) {
        return function(d) {
          return _this.height - _this.y(d);
        };
      })(this),
      width: this.x.rangeBand()
    });
    ticks = g.append("g").classed("x axis", true).attr("transform", "translate(0," + this.height + ")").call(this.xAxis);
    ticks.selectAll('text').text((function(_this) {
      return function(d, i) {
        return _this.labels[i];
      };
    })(this));
  }

  return Weekday;

})(SmallGraph);

Month = (function(_super) {
  __extends(Month, _super);

  Month.prototype.labels = FillArray(31);

  Month.prototype.x = d3.scale.ordinal().domain(Month.prototype.labels).rangeRoundBands([0, Month.prototype.width], .2);

  Month.prototype.xAxis = d3.svg.axis().scale(Month.prototype.x).orient("bottom").tickValues([1, 7, 14, 21, 31]);

  function Month(g, d) {
    var add_point, bar, days, point, ticks, _i, _len, _ref;
    days = FillArray(31, 0);
    add_point = function(p) {
      return days[p[0].getDate() - 1] += p[1];
    };
    _ref = d.points();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      point = _ref[_i];
      add_point(point);
    }
    this.y.domain([0, d3.max(days)]);
    bar = g.selectAll("g").data(days).enter().append("g").attr("transform", (function(_this) {
      return function(d, i) {
        return "translate(" + _this.x(i + 1) + ",0)";
      };
    })(this));
    bar.append("rect").attr({
      "class": "bar",
      y: (function(_this) {
        return function(d) {
          return _this.y(d);
        };
      })(this),
      height: (function(_this) {
        return function(d) {
          return _this.height - _this.y(d);
        };
      })(this),
      width: this.x.rangeBand()
    });
    ticks = g.append("g").attr("class", "x axis").attr("transform", "translate(-0.5," + this.height + ")").call(this.xAxis);
  }

  return Month;

})(SmallGraph);

Summary = (function() {
  function Summary(obj) {
    if (obj) {
      this.name = obj.name, this.dates = obj.dates, this.calls = obj.calls;
    }
    if (this.name == null) {
      this.name = "";
    }
    if (this.dates == null) {
      this.dates = [];
    }
    if (this.calls == null) {
      this.calls = [];
    }
  }

  Summary.prototype.sum = function(days) {
    if (days == null) {
      days = this.calls;
    }
    if (this.calls.length > 0) {
      return _.reduce(days, function(memo, num) {
        return memo + num;
      });
    } else {
      return 0;
    }
  };

  Summary.prototype.max = function() {
    return _.reduce(this.calls, function(m, n) {
      if (n > m) {
        return n;
      } else {
        return m;
      }
    });
  };

  Summary.prototype.min = function() {
    return _.reduce(this.calls, function(m, n) {
      if (n < m) {
        return n;
      } else {
        return m;
      }
    });
  };

  Summary.prototype.avg = function(moving) {
    var pastdays;
    pastdays = _.last(this.calls, moving);
    return this.sum(pastdays) / moving;
  };

  Summary.prototype.add = function(points) {
    var iter;
    iter = function(e, i, l) {
      var date, date_pos, _ref;
      date_pos = _.sortedIndex(this.dates, e[0]);
      date = (_ref = this.dates[date_pos]) != null ? _ref : 0;
      if (e[0].valueOf() !== date.valueOf()) {
        this.dates = _.first(this.dates, date_pos).concat([e[0]], _.rest(this.dates, date_pos));
        this.calls = _.first(this.calls, date_pos).concat([0], _.rest(this.calls, date_pos));
      }
      return this.calls[date_pos] += e[1];
    };
    return _.each(points, iter, this);
  };

  Summary.prototype.points = function() {
    return _.zip(this.dates, this.calls);
  };

  return Summary;

})();

build = function(data) {
  var display, media_li, total_calls;
  total_calls = new Summary;
  total_calls.name = "All phone numbers";
  display = _.map(data, function(v, i, l) {
    var this_state;
    v.dates = _.map(v.x, function(v, i, l) {
      return parseDate(v);
    });
    v.calls = _.map(v.y, function(v, i, l) {
      var _name;
      return v - (l[_name = i - 1] != null ? l[_name] : l[_name] = 0);
    });
    this_state = new Summary(v);
    total_calls.add(this_state.points());
    return this_state;
  });
  display = _.sortBy(display, function(v) {
    return v.calls[v.calls.length - 2] - v.calls[v.calls.length - 1];
  });
  display.unshift(total_calls);
  media_li = d3.select('#programs').selectAll('li').data(display).enter().append("li").classed("list-group-item", true).append("div").classed("media", true);
  media_li.each(function(d, i) {
    var body, media, month, spark, svg, week;
    media = d3.select(this);
    svg = media.append("div").classed("pull-left", true).append('svg').classed("media-object", true).attr('width', 112).attr('height', 192);
    spark = svg.append('g').attr('transform', 'translate(0, 2)');
    week = svg.append('g').attr('transform', 'translate(0, 112)');
    month = svg.append('g').attr('transform', 'translate(0, 48)');
    new Sparkline(spark, d);
    new Weekday(week, d);
    new Month(month, d);
    body = media.append('div').classed("media-body", true);
    body.append('h4').classed("media-heading", true).text(d.name);
    body.append('p').text(function(d, i) {
      var sentence;
      sentence = ["There were", "", "balance checks between", "", "and", ""];
      sentence[1] = d.sum();
      sentence[3] = DateUtil(_.first(d.dates), "M/D");
      sentence[5] = DateUtil(_.last(d.dates), "M/D") + ".";
      return sentence.join(" ");
    });
    body.append('p').text(function(d, i) {
      var chk, tenday;
      tenday = d.avg(10).toFixed(1);
      chk = tenday === 1 ? " check" : " checks";
      return "There was an average of  " + tenday + chk + " per day over the past 10 days.";
    });
    return body.append('p').text(function(d, i) {
      var diff, lastcalls, lastdates, sentence;
      lastcalls = _.last(d.calls, 2);
      lastdates = _.last(d.dates, 2);
      diff = lastcalls[1] - lastcalls[0];
      sentence = ["There ...", "num", "more", "checks", "on", "date", "than on", "date"];
      sentence[0] = (Math.abs(diff)) === 1 ? "There was" : "There were";
      sentence[1] = Math.abs(diff);
      sentence[2] = diff > 0 ? "more" : "fewer";
      sentence[3] = (Math.abs(diff)) === 1 ? "check" : "checks";
      sentence[5] = DateUtil(lastdates[1], "M/D");
      sentence[7] = DateUtil(lastdates[0], "M/D") + ".";
      if (diff === 0) {
        sentence[1] = "the";
        sentence[2] = "same number of";
        sentence[6] = "and";
      }
      return sentence.join(" ");
    });
  });
  return 'Sorted by largest daily increase';
};

$(document).ready(function() {
  var msg;
  msg = function(text) {
    return d3.select('#ticker_msg').text(text);
  };
  msg('Requesting balance check info ... ');
  return $.ajax({
    dataType: "json",
    url: 'https://plot.ly/~lippytak/184/balance-metrics-checks.json'
  }).done(function(data) {
    if (data.data) {
      msg('Got it.  Building reports now ...');
      return msg(build(data.data));
    } else {
      return msg('Sorry, no data was sent back.');
    }
  }).fail(function(err) {
    return msg('Sorry, the request failed.');
  });
});

//# sourceMappingURL=data:application/json;base64,